// Generated by Dagger (https://dagger.dev).
package com.example.samples.ui.main.camera;

import com.example.samples.data.repository.UserRepository;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import javax.inject.Provider;
import kotlinx.coroutines.CoroutineDispatcher;

@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class CameraViewModel_Factory implements Factory<CameraViewModel> {
  private final Provider<CoroutineDispatcher> dispatcherProvider;

  private final Provider<UserRepository> userRepositoryProvider;

  public CameraViewModel_Factory(Provider<CoroutineDispatcher> dispatcherProvider,
      Provider<UserRepository> userRepositoryProvider) {
    this.dispatcherProvider = dispatcherProvider;
    this.userRepositoryProvider = userRepositoryProvider;
  }

  @Override
  public CameraViewModel get() {
    return newInstance(dispatcherProvider.get(), userRepositoryProvider.get());
  }

  public static CameraViewModel_Factory create(Provider<CoroutineDispatcher> dispatcherProvider,
      Provider<UserRepository> userRepositoryProvider) {
    return new CameraViewModel_Factory(dispatcherProvider, userRepositoryProvider);
  }

  public static CameraViewModel newInstance(CoroutineDispatcher dispatcher,
      UserRepository userRepository) {
    return new CameraViewModel(dispatcher, userRepository);
  }
}
